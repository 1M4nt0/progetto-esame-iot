#include "board_conf.h"
#include "WiFi.h"
#include "SPI.h"
#include "screen_utils.h"
#include <ArduinoOTA.h>
#include <ESPAsyncWebServer.h>
#include <WebSocketsClient.h>
#include <WebSocketsServer.h>
#include <vector>

using namespace std;

#define C_PLAYER_ID 1
#define C_BEGIN_MATCH 2
#define C_END_MATCH 3
#define C_TIME 4
#define C_WINNER 5
#define MATCH_DURATION 10000

#define BUTTON_PIN 16
#define LED_PIN 17

std::map<int, IPAddress> PlayerAddress;
const char *WIFI_SSID = "IoTGame";
const char *WIFI_PASSWORD = "testpassword";
uint8_t *packetBuffer; // buffer to hold packets

bool master = false;
int playerID = 0;
int matchStartTime = 0;
int playerPoints = 0;
bool light = false;

// AsyncWebServer server(80);
WebSocketsClient webSocketClient;
// WebSocketsServer webSocketServer(80, "/ws");
AsyncWebSocket ws("/ws");

vector<int> connectedPlayersID;

struct
{
  int id;
  int time;
} Winner;

void initWebServer()
{
}

void handlePlayerConnected(int remoteID)
{
  int newPlayerID = remoteID + 1;
  connectedPlayersID.push_back(newPlayerID);
  memset(packetBuffer, C_PLAYER_ID, 1);
  memset(packetBuffer + 1, newPlayerID, 1);
  // webSocketServer.sendBIN(remoteID, packetBuffer, 2);
}

void handle_player_disconnected(int id)
{
  connectedPlayersID.erase(remove(connectedPlayersID.begin(), connectedPlayersID.end(), id), connectedPlayersID.end());
}

void manageWinner(int id, short pressingTime)
{
  if (Winner.time > pressingTime)
  {
    Winner.time = pressingTime;
    Winner.id = id + 1;
  }
}

void handleButtonPress(short pressingTime)
{
  if (master)
  {
    manageWinner(0, pressingTime);
  }
  else
  {
    memset(packetBuffer, C_PLAYER_ID, 1);
    memset(packetBuffer + 1, pressingTime, 2);
    webSocketClient.sendBIN(packetBuffer, 3);
  }
}

void handleTimeRecieved(int id, uint8_t *payload)
{
  short newTime;
  memcpy(&newTime, payload + 1, 2);
  manageWinner(id, newTime);
}

void handlePlayerIDRecieved(uint8_t *payload)
{
  uint8_t id;
  memcpy(&id, payload + 1, 1);
  playerID = id;
}

void handleSendAccendi()
{
  digitalWrite(LED_PIN, HIGH);
  matchStartTime = millis();
}

void handleSendSpegni()
{
  digitalWrite(LED_PIN, LOW);
}

void webSocketClientEvent(WStype_t type, uint8_t *payload, size_t length)
{

  switch (type)
  {
  case WStype_DISCONNECTED:
    break;
  case WStype_CONNECTED:
    break;
  case WStype_BIN:
  {
    int code = payload[0];
    if (code == C_PLAYER_ID)
    {
      handlePlayerIDRecieved(payload);
    }
    else if (code == C_BEGIN_MATCH)
    {
      handleSendAccendi();
    }
    else if (code == C_END_MATCH)
    {
      handleSendSpegni();
    }
  }
  break;
  case WStype_ERROR:
    break;
  }
}

void webSocketServerEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len)
{
  if (type == WS_EVT_CONNECT)
  {
    // client connected
  }
  else if (type == WS_EVT_DISCONNECT)
  {
    // client disconnected
  }
  else if (type == WS_EVT_ERROR)
  {
    // error was received from the other end
  }
  else if (type == WS_EVT_PONG)
  {
    // pong message was received (in response to a ping request maybe)
  }
  else if (type == WS_EVT_DATA)
  {
    // data packet
  }
}
/*
void webSocketServerEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t length)
{
  switch (type)
  {
  case WStype_DISCONNECTED:
    break;
  case WStype_CONNECTED:
  {
    handlePlayerConnected(num);
  }
  break;
  case WStype_BIN:
  {
    int code = payload[0];
    if (code == C_TIME)
    {
      handleTimeRecieved(num, payload);
    }
  }
  break;
  case WStype_ERROR:
    break;
  }
}


void initServerSocket()
{
  webSocketServer.begin();
  webSocketServer.onEvent(webSocketServerEvent);
}
*/
void initClientSocket()
{
  webSocketClient.begin("192.168.4.1", 80, "/ws");
  webSocketClient.onEvent(webSocketClientEvent);
  webSocketClient.setReconnectInterval(5000);
}

void startOTA()
{
  ArduinoOTA
      .onStart([]()
               {
      String type;
      if (ArduinoOTA.getCommand() == U_FLASH)
        type = "sketch";
      else
        type = "filesystem";
      Serial.println("Start updating " + type); })
      .onEnd([]()
             { 
                drawToScreen("Aggiornato! :)");
                delay(2000); 
                drawToScreen("Riavvio...");
                delay(2000); })
      .onProgress([](unsigned int progress, unsigned int total)
                  { drawToScreen("Progresso: " + String(progress / (total / 100)) + "%"); })
      .onError([](ota_error_t error)
               { drawToScreen("Errore :("); });
  ArduinoOTA.begin();
}

void manageConnection()
{
  drawToScreen("Connecting...");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD, 7);
  int status = WiFi.status();
  String IP;
  while (status != WL_CONNECTED && status != WL_NO_SSID_AVAIL)
  {
    delay(2000);
    status = WiFi.status();
  }
  if (status == WL_NO_SSID_AVAIL)
  {
    WiFi.mode(WIFI_MODE_AP);
    WiFi.softAP(WIFI_SSID, WIFI_PASSWORD, 7, 0);
    drawToScreen("Sei l'host!");
    master = true;
    playerID = 0;
    initWebServer();
    initServerSocket();
  }
  else
  {
    drawToScreen("Connesso!");
    initClientSocket();
  }
}

void beginMultiplayer()
{
  drawToScreen("INIZIO");
  Winner.time = MATCH_DURATION;
  memset(&packetBuffer, C_BEGIN_MATCH, 1);
  webSocketServer.broadcastBIN(packetBuffer, 1);
  matchStartTime = millis();
  digitalWrite(LED_PIN, HIGH);
}

void endMultiplayer()
{
  drawToScreen("FINE");
  digitalWrite(LED_PIN, LOW);
}

void setup()
{
  initDisplay();
  drawToScreen("Avvio...");
  Serial.begin(115200);
  pinMode(BUTTON_PIN, INPUT);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  manageConnection();
  startOTA();
}

void loop()
{
  ArduinoOTA.handle();
  if (WiFi.status() != WL_CONNECTED && master != true)
  {
    drawToScreen("Disconnesso :(");
    delay(random(1000, 10000));
    manageConnection();
  }
  else
  {
    if (master) // MASTER
    {
      webSocketServer.loop();
      if (millis() > matchStartTime + 10000)
      {
        endMultiplayer();
        delay(random(2000, 8000));
        beginMultiplayer();
      }
      else if (digitalRead(LED_PIN) == HIGH)
      {
        if (digitalRead(BUTTON_PIN) == LOW)
        {
          digitalWrite(LED_PIN, LOW);
          handleButtonPress(millis() - matchStartTime);
        }
      }
    }
    else // CLIENT
    {
      webSocketClient.loop();
    }
  }
}
